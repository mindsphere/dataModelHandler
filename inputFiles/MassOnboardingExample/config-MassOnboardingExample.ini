[general]

#allowed values for mode are: "import","delete","export","agents" 
toolMode = agents

tenantname = <yourTenantName>
mindSphereEnvironment = <yourMindSphereEnvironment, e.g. eu1 or eu2>

# logging: 
#Which logging amount is required: Errors only = ERROR; additional information = INFO, all details = VERBOSE
logging = INFO

# useLocalFilesToPreserveMindSphereData:
# To avoid multiple callings of MindSphere APIs. This is primary for local testing.
# Attention: If this is set to True, data will only be fetched one time from MindSphere and then saved in a local repository in the /temp folder
# Imports or Delets done by the importer will be reflected in that local repository. But in case someone else is modifying data in Mindsphere, the datamodels will be out of sync which can run to errors. In that case just delete the contents of the temp folder.
# To refetch the actal data from MindSphere, delete those files or change this parameter to False.
useLocalFilesToPreserveMindSphereData = True 

#dryRun:
#If this is set to true, nothing will be imported, all imports will fake a successful import. 
# Faking Imports will lead to errors when trying to look up assetIds of parent assets, since those Ids do not really exist 
dryRun = False 
askBeforeEachApiCall = False


# assetImportInputFile
# Provide path to input file for assetImports here.
# eg. relative Path (starting from UniversalImporter-Folder as root):
# assetImportInputFile = uploads/input.csv
# eg absolute path on windows:
# assetImportInputFile = C:\PythonUniversalImporter\uploads\input.csv

assetImportInputFile = inputFiles\MassOnboardingExample\importMassonboardingSites.csv
assetDeletionInputFile = inputFiles\MassOnboardingExample\deleteMassonboarding.csv
agentImportDefintionFile = inputFiles\MassOnboardingExample\agentDefinitions.csv
inputFolderWithAgentDefinitions = inputFiles\MassOnboardingExample

[exportDefinitions]
# parentIdsToBeExported: provide a list of all parent assets IDs which structure below should be exported. Multiple IDs are possible and to be separated with ';'

#Specify a list (separated by ;) with all assetNames or assetIds  where structure should be exported (depending on export-mode all childs will be exported, too)
parentIdsToBeExported =  Mass Onboarding
# exportMode: choose either "full" (Assets, Asset-Types and Aspects) or "assets-only"
exportMode = full
exportedDataOutputFile = outputFiles/{{tenantname}}/3 exportExample - fullDataModllWithAgentData/exportExampleCompleteDataModel.csv
# If "exportAgentAndMappingConfiguration" is set to true, an additional file will be created, that contains all device configrations, datasources and also all mappings 
exportAgentAndMappingConfiguration = True
#The following parameters should only be set to true if you want to update existing agents
exportAgentDataWithIds = False
exportTargetAssetDataWithIds = False

#If this is activated neutralIds will be used in Asset/Agent Exports
convertToNeutralIds = True

# [defaults]:
# Define some standards which are chosen if the parameter is not specified in the input
[defaults] 
#Provide default tenant name (as ID or name, if both is specified, Id will be chosen first) 
defaultParentAssetName = {{tenantname}}
defaultParentAssetId = 
defaultAssetType = Pump
defaultParentAssetTypeId = core.basicasset
defaultAssetDescription = AutoGeneratedAssetDesc
defaultAssetTypeDescription = AutoGeneratedAssetTypeDesc
defaultAspectDescription = AutoGeneratedAspectDesc
defaultDataSourceReadCycle = 10

# Enter default mapping behavior in adding some of those keywords 
#Map -> Maps datapoints between agent and assets -> This will try to auto map the given parameters, if nothing else is specified. Auto-map is based on the given parameters: It will look for variables that are named euqally and fit to the datatype and the unit and map those 
#CreateAgent -> Create the Agents with their data sources
#DeriveType -> Derives an AssetType based of the given Datapoints constructs - optioanl: if Asset Type Id is already existing, do an AssetType extension -> all datapoints that are not found will be created on the assettype using the datasourcename as aspectname and the datapoint name as variable (if not specified more concrete) 
#DeriveAsset -> Intantiates an Asset (and includes Derive Type)

defaultMappingModes = CreateAgent, DeriveType, DeriveAsset, Map

# maxLengthForStringVariableCreation
# This is a fixed value which cannot be changed during the import. The number given here will apply for all strings. 
# TODO: Include this in input data 
maxLengthForStringVariableCreation = 255 



[api]
# standalone:
# This means, that the importer is running without a Mindsphere Context. This is currently the only way it works ...
standalone = True

# authenticationMode:
# specifiy where the token should come from, possible values are:
# 1) manual -> you have to insert a manual token via commandline interface
# 2) appCredentials -> token will be extracted using appCredentialsSection
# 3) serviceCredentials -> token will be extracted using serviceCredentialsSection
# 4) browserSession -> specify session ID and XSRF token from your current browser session
#authenticationMode = serviceCredentials
authenticationMode = browserSession


#Adapt domain-part "eu1" accordingly. In case you want to communicate with an azure tenant, use eu2 instead
gatewayPrefix = https://gateway.{{mindSphereEnvironment}}.mindsphere.io


# AppCredentials:
# Provide a full set of working app credentials here if you want to use AppCredentials for Token Generation.
[appCredentials]
appversion = <yourAppVersion>
appname = <yourAppName>
client_id = <yourClientId>
client_secret = <yourClienSecret>
host_tenant =  <yourHostTenant>
user_tenant = {{tenantname}}

# ServiceCredentials(deprecated)
# In case you have service credentials you might be still able to use them, but no new ones will be issued anymore
# Provide  a set of working service credentials here if you want to use ServiceCredentials for Token Generation.
# This is only possible for Dev and Operator Tenants
# Keep in mind to adapt also the URL (which has to include your tenant name), which should be done automatically 
[serviceCredentials]
serviceCredentialsClientId = <yourServiceCredentialsClient>
serviceCredentialsClientSecret = <yourServiceCredentialsSecret>
serviceCredentialsAuthUrl = https://{{tenantname}}.piam.{{mindSphereEnvironment}}.mindsphere.io/oauth/token

